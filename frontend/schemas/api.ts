// tslint:disable
/**
 * Sample API specification
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * ドキュメント
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * ドキュメントID
     * @type {string}
     * @memberof Document
     */
    id: string;
    /**
     * ユーザーID
     * @type {string}
     * @memberof Document
     */
    userId: string;
    /**
     * 英文
     * @type {string}
     * @memberof Document
     */
    sentence: string;
    /**
     * 訳
     * @type {string}
     * @memberof Document
     */
    translation: string;
    /**
     * 作成日
     * @type {string}
     * @memberof Document
     */
    createdAt: string;
    /**
     * 更新日
     * @type {string}
     * @memberof Document
     */
    updatedAt: string;
    /**
     * 
     * @type {Array<Mark>}
     * @memberof Document
     */
    marks: Array<Mark>;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * ステータスコード
     * @type {number}
     * @memberof ErrorResponse
     */
    status?: number;
    /**
     * エラーメッセージ
     * @type {string}
     * @memberof ErrorResponse
     */
    message?: string;
}
/**
 * 単語に付与されたマーク
 * @export
 * @interface Mark
 */
export interface Mark {
    /**
     * マークが付与されているインデックス
     * @type {number}
     * @memberof Mark
     */
    index: number;
    /**
     * マークの種別
     * @type {string}
     * @memberof Mark
     */
    type: string;
}

/**
 * DocumentApi - axios parameter creator
 * @export
 */
export const DocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ドキュメント一覧取得API
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments(userId: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getDocuments.');
            }
            const localVarPath = `/documents`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentApi - functional programming interface
 * @export
 */
export const DocumentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * ドキュメント一覧取得API
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Document>> {
            const localVarAxiosArgs = DocumentApiAxiosParamCreator(configuration).getDocuments(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DocumentApi - factory interface
 * @export
 */
export const DocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * ドキュメント一覧取得API
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments(userId: string, options?: any) {
            return DocumentApiFp(configuration).getDocuments(userId, options)(axios, basePath);
        },
    };
};

/**
 * DocumentApi - object-oriented interface
 * @export
 * @class DocumentApi
 * @extends {BaseAPI}
 */
export class DocumentApi extends BaseAPI {
    /**
     * ドキュメント一覧取得API
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApi
     */
    public getDocuments(userId: string, options?: any) {
        return DocumentApiFp(this.configuration).getDocuments(userId, options)(this.axios, this.basePath);
    }

}


